# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import lms_pb2 as lms__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lms_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LMSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/lms.LMS/register',
                request_serializer=lms__pb2.RegisterRequest.SerializeToString,
                response_deserializer=lms__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.login = channel.unary_unary(
                '/lms.LMS/login',
                request_serializer=lms__pb2.LoginRequest.SerializeToString,
                response_deserializer=lms__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.logout = channel.unary_unary(
                '/lms.LMS/logout',
                request_serializer=lms__pb2.LogoutRequest.SerializeToString,
                response_deserializer=lms__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.post = channel.unary_unary(
                '/lms.LMS/post',
                request_serializer=lms__pb2.PostRequest.SerializeToString,
                response_deserializer=lms__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.get = channel.unary_unary(
                '/lms.LMS/get',
                request_serializer=lms__pb2.GetRequest.SerializeToString,
                response_deserializer=lms__pb2.GetResponse.FromString,
                _registered_method=True)
        self.askQuestion = channel.unary_unary(
                '/lms.LMS/askQuestion',
                request_serializer=lms__pb2.QuestionRequest.SerializeToString,
                response_deserializer=lms__pb2.AnswerResponse.FromString,
                _registered_method=True)
        self.gradeStudent = channel.unary_unary(
                '/lms.LMS/gradeStudent',
                request_serializer=lms__pb2.GradeRequest.SerializeToString,
                response_deserializer=lms__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.giveFeedback = channel.unary_unary(
                '/lms.LMS/giveFeedback',
                request_serializer=lms__pb2.FeedbackRequest.SerializeToString,
                response_deserializer=lms__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.requestVote = channel.unary_unary(
                '/lms.LMS/requestVote',
                request_serializer=lms__pb2.RequestVoteMessage.SerializeToString,
                response_deserializer=lms__pb2.RequestVoteReply.FromString,
                _registered_method=True)
        self.appendEntries = channel.unary_unary(
                '/lms.LMS/appendEntries',
                request_serializer=lms__pb2.AppendEntriesMessage.SerializeToString,
                response_deserializer=lms__pb2.AppendEntriesReply.FromString,
                _registered_method=True)
        self.leaderSteppingDown = channel.unary_unary(
                '/lms.LMS/leaderSteppingDown',
                request_serializer=lms__pb2.LeaderStepDownMessage.SerializeToString,
                response_deserializer=lms__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.get_logs = channel.unary_unary(
                '/lms.LMS/get_logs',
                request_serializer=lms__pb2.LogRequest.SerializeToString,
                response_deserializer=lms__pb2.LogResponse.FromString,
                _registered_method=True)
        self.index = channel.unary_unary(
                '/lms.LMS/index',
                request_serializer=lms__pb2.IndexRequest.SerializeToString,
                response_deserializer=lms__pb2.IndexResponse.FromString,
                _registered_method=True)


class LMSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def askQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gradeStudent(self, request, context):
        """New RPC for grading students
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def giveFeedback(self, request, context):
        """New RPC for giving feedback
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def appendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def leaderSteppingDown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def index(self, request, context):
        """New RPC for the index method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LMSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=lms__pb2.RegisterRequest.FromString,
                    response_serializer=lms__pb2.StatusResponse.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=lms__pb2.LoginRequest.FromString,
                    response_serializer=lms__pb2.LoginResponse.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=lms__pb2.LogoutRequest.FromString,
                    response_serializer=lms__pb2.StatusResponse.SerializeToString,
            ),
            'post': grpc.unary_unary_rpc_method_handler(
                    servicer.post,
                    request_deserializer=lms__pb2.PostRequest.FromString,
                    response_serializer=lms__pb2.StatusResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=lms__pb2.GetRequest.FromString,
                    response_serializer=lms__pb2.GetResponse.SerializeToString,
            ),
            'askQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.askQuestion,
                    request_deserializer=lms__pb2.QuestionRequest.FromString,
                    response_serializer=lms__pb2.AnswerResponse.SerializeToString,
            ),
            'gradeStudent': grpc.unary_unary_rpc_method_handler(
                    servicer.gradeStudent,
                    request_deserializer=lms__pb2.GradeRequest.FromString,
                    response_serializer=lms__pb2.StatusResponse.SerializeToString,
            ),
            'giveFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.giveFeedback,
                    request_deserializer=lms__pb2.FeedbackRequest.FromString,
                    response_serializer=lms__pb2.StatusResponse.SerializeToString,
            ),
            'requestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.requestVote,
                    request_deserializer=lms__pb2.RequestVoteMessage.FromString,
                    response_serializer=lms__pb2.RequestVoteReply.SerializeToString,
            ),
            'appendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.appendEntries,
                    request_deserializer=lms__pb2.AppendEntriesMessage.FromString,
                    response_serializer=lms__pb2.AppendEntriesReply.SerializeToString,
            ),
            'leaderSteppingDown': grpc.unary_unary_rpc_method_handler(
                    servicer.leaderSteppingDown,
                    request_deserializer=lms__pb2.LeaderStepDownMessage.FromString,
                    response_serializer=lms__pb2.StatusResponse.SerializeToString,
            ),
            'get_logs': grpc.unary_unary_rpc_method_handler(
                    servicer.get_logs,
                    request_deserializer=lms__pb2.LogRequest.FromString,
                    response_serializer=lms__pb2.LogResponse.SerializeToString,
            ),
            'index': grpc.unary_unary_rpc_method_handler(
                    servicer.index,
                    request_deserializer=lms__pb2.IndexRequest.FromString,
                    response_serializer=lms__pb2.IndexResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LMS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LMS', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LMS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/register',
            lms__pb2.RegisterRequest.SerializeToString,
            lms__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/login',
            lms__pb2.LoginRequest.SerializeToString,
            lms__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/logout',
            lms__pb2.LogoutRequest.SerializeToString,
            lms__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/post',
            lms__pb2.PostRequest.SerializeToString,
            lms__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get',
            lms__pb2.GetRequest.SerializeToString,
            lms__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def askQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/askQuestion',
            lms__pb2.QuestionRequest.SerializeToString,
            lms__pb2.AnswerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gradeStudent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/gradeStudent',
            lms__pb2.GradeRequest.SerializeToString,
            lms__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def giveFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/giveFeedback',
            lms__pb2.FeedbackRequest.SerializeToString,
            lms__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def requestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/requestVote',
            lms__pb2.RequestVoteMessage.SerializeToString,
            lms__pb2.RequestVoteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def appendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/appendEntries',
            lms__pb2.AppendEntriesMessage.SerializeToString,
            lms__pb2.AppendEntriesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def leaderSteppingDown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/leaderSteppingDown',
            lms__pb2.LeaderStepDownMessage.SerializeToString,
            lms__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/get_logs',
            lms__pb2.LogRequest.SerializeToString,
            lms__pb2.LogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/index',
            lms__pb2.IndexRequest.SerializeToString,
            lms__pb2.IndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
